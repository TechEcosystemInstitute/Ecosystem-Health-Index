
#!/usr/bin/env python3
"""
Ecosystem Health Index (EHI) Report Generator

This script generates visual reports based on EHI scores.
"""

import os
import json
import argparse
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import seaborn as sns
from datetime import datetime


class EHIReportGenerator:
    """Generates visual reports for Ecosystem Health Index data."""
    
    def __init__(self, scores_file):
        """Initialize the report generator with scores data."""
        with open(scores_file, 'r') as f:
            self.scores_data = json.load(f)
        
        self.company_name = self.scores_data.get("company_name", "Unknown")
        self.dimensions = self.scores_data.get("dimensions", {})
        self.total_score = self.scores_data.get("total_score", 0)
        
        # Set visual style
        sns.set_style("whitegrid")
        plt.rcParams['font.family'] = 'sans-serif'
        plt.rcParams['font.sans-serif'] = ['Arial', 'Helvetica', 'DejaVu Sans']
        plt.rcParams['figure.figsize'] = (12, 9)
    
    def create_radar_chart(self):
        """Create a radar chart for the dimension scores."""
        # Prepare data
        dimensions = list(self.dimensions.keys())
        dim_labels = [dim.replace('_', ' ').title() for dim in dimensions]
        values = [self.dimensions[dim] for dim in dimensions]
        
        # To create a complete circle, we need to close the plot
        values.append(values[0])
        dim_labels.append(dim_labels[0])
        
        # Calculate angle for each dimension
        angles = [n / float(len(dimensions)) * 2 * 3.14159 for n in range(len(dimensions))]
        angles += angles[:1]  # Close the loop
        
        # Create plot
        fig, ax = plt.subplots(figsize=(10, 10), subplot_kw=dict(polar=True))
        
        # Draw dimension lines
        plt.xticks(angles[:-1], dim_labels[:-1], size=12)
        
        # Draw the chart
        ax.plot(angles, values, linewidth=2, linestyle='solid', color='#3498db')
        ax.fill(angles, values, alpha=0.25, color='#3498db')
        
        # Customize chart
        ax.set_theta_offset(3.14159 / 2)  # Start from top
        ax.set_theta_direction(-1)  # Go clockwise
        
        # Set y-axis limits and labels
        plt.ylim(0, 20)
        plt.yticks([5, 10, 15, 20], ['5', '10', '15', '20'], color='grey', size=10)
        
        # Add title
        plt.title(f"Ecosystem Health Index - {self.company_name}", size=20, pad=20)
        
        # Add total score in the center
        plt.annotate(f"Total Score: {self.total_score}/100", xy=(0.5, 0.5), 
                     xycoords='figure fraction', ha='center', va='center', 
                     fontsize=24, fontweight='bold')
        
        return fig
    
    def create_bar_chart(self):
        """Create a horizontal bar chart for the dimension scores."""
        # Prepare data
        dimensions = list(self.dimensions.keys())
        dim_labels = [dim.replace('_', ' ').title() for dim in dimensions]
        values = [self.dimensions[dim] for dim in dimensions]
        
        # Create color gradient based on scores
        colors = plt.cm.YlGnBu([(v/20) * 0.8 + 0.2 for v in values])
        
        # Create plot
        fig, ax = plt.subplots(figsize=(12, 8))
        bars = ax.barh(dim_labels, values, color=colors)
        
        # Add data labels
        for bar in bars:
            width = bar.get_width()
